def solution(name):
    # 일단 알파벳 배열이 있는게 편할듯 => 리스트 슬라이싱을 이용
    # 탐욕 알고리즘으로 보면, A랑 가장 많이 차이나는 (+ 위치차이) 알파벳을 가장 처음으로 하는게 빠를듯?
    alph = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' #0~25인
    back_alph = sorted(alph, reverse = True)
    move_alph = int()
    move_idx = int()
    move_alph_li = list()
    answer_li = int()
    current_idx = int()
    answer = 0
    
    
    #이름에서 추출해보자
    for idx, alphbet in enumerate(name):
        idx_alph = alph.index(alphbet)
        if idx_alph >= 25 - idx_alph: # B예시) 1 이랑 24 비교
            move_alph = 25 - idx_alph + 1 # 1칸만 올리면됨
        else: # X예시) 23 이랑 2이랑 비교
            move_alph = idx_alph
        move_alph_li.append([move_alph,idx])
    current_idx = 0
    seeking = 0
    alphbet_sum = 0
    print(move_alph_li)
    for alphbet , idx in move_alph_li:
        alphbet_sum += alphbet
        if alphbet == 0 :
            answer += 0 # A는 그냥 지나감
        else:
            answer += 1
    print(answer, alphbet_sum)
    return answer - 1 + alphbet_sum # 첫 시작만 뺌